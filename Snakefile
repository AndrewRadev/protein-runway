from snakemake.io import glob_wildcards

from lib.trajectory import Trajectory
from lib.normal_modes import NormalModes, generate_nmd_from_pdb
from lib.segmentation import (
    write_segmentations,
    geostas,
    merizo,
    chainsaw,
)

protein_names = glob_wildcards("01_input/traj/{protein_name}_10-20ns_100snap.trr").protein_name

# Rules to download external projects. Important outputs:
# - vendor/merizo_ok.txt
# - vendor/chainsaw_ok.txt
include: "workflow/vendor.smk"

# Rules to generate extra information about the runs
include: "workflow/extra.smk"

rule all:
    input:
        expand("03_output/{protein_name}.segmentation.tsv", protein_name=protein_names),
        expand("03_output/{protein_name}.nmd_traj.pdb", protein_name=protein_names),
        aggregated_csv=report("04_extra/benchmarks/aggregated_runtime.csv")

rule segment_by_chainsaw:
    input:
        structure_file="02_intermediate/pdb/{protein_name}.static.pdb",
        chainsaw_ok="vendor/chainsaw_ok.txt"
    output:
        output_file="02_intermediate/chainsaw/{protein_name}.tsv",
        benchmark_tsv="04_extra/benchmarks/chainsaw_clustering/{protein_name}.tsv",
    benchmark:
        "04_extra/benchmarks/chainsaw_clustering/{protein_name}.tsv"
    shell:
        """
        python vendor/chainsaw/get_predictions.py \
            --structure_file {input.structure_file} \
            --output {output.output_file}

        # Clean up after chainsaw
        if [ -d results ]; then
          rmdir results/
        fi
        """

rule segment_by_merizo:
    input:
        structure_file="02_intermediate/pdb/{protein_name}.static.pdb",
        merizo_ok="vendor/merizo_ok.txt"
    output:
        output_file="02_intermediate/merizo/{protein_name}.tsv",
        benchmark_tsv="04_extra/benchmarks/merizo_clustering/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/merizo_clustering/{protein_name}.tsv"
    shell:
        """
        # PDB Chain generated by MDAnalysis is labelled "X"
        python vendor/merizo/predict.py \
            --pdb_chain X \
            -i {input.structure_file} \
            > {output.output_file}
        """

rule build_pdb_files:
    input:
        topology="01_input/top/{protein_name}_complex.top",
        trajectory="01_input/traj/{protein_name}_10-20ns_100snap.trr"
    output:
        traj_pdb_file="02_intermediate/pdb/{protein_name}.with_traj.pdb",
        traj_ca_pdb_file="02_intermediate/pdb/{protein_name}.with_traj.ca.pdb",
        traj_ca_dcd_file="02_intermediate/pdb/{protein_name}.with_traj.ca.dcd",
        static_pdb_file="02_intermediate/pdb/{protein_name}.static.pdb",
        benchmark_tsv="04_extra/benchmarks/build_pdbs/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/build_pdbs/{protein_name}.tsv"
    run:
        trajectory = Trajectory.from_paths(input.topology, input.trajectory)

        trajectory.write_static(output.static_pdb_file, 'protein')
        trajectory.write_frames(output.traj_pdb_file, 'protein')

        trajectory.write_frames(output.traj_ca_pdb_file, 'protein and name is CA')
        trajectory.write_frames(output.traj_ca_dcd_file, 'protein and name is CA')

rule build_nmd_file:
    input:
        pdb_file="02_intermediate/pdb/{protein_name}.with_traj.pdb",
    output:
        nmd_file="02_intermediate/pca/{protein_name}.nmd",
        benchmark_tsv="04_extra/benchmarks/build_nmd/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/build_nmd/{protein_name}.tsv"
    run:
        generate_nmd_from_pdb(input.pdb_file, output.nmd_file)

rule build_trajectory_from_nmd:
    input:
        nmd_file="02_intermediate/pca/{protein_name}.nmd",
    output:
        traj_file="03_output/{protein_name}.nmd_traj.pdb",
        benchmark_tsv="04_extra/benchmarks/nmd_trajectory/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/nmd_trajectory/{protein_name}.tsv"
    run:
        #doesn't seem like good practice to refer to variables from a previous rule,
        #  but it also seems weird to me to now have two instantiated NormalModes objects
        #  that aren't connected, or perhaps that doesn't matter for the snakemake logic?
        nmd_traj = NormalModes()
        nmd_traj.parse_nmd_file(input.nmd_file)

        trajectory = nmd_traj.generate_trajectory()
        trajectory.write_frames(output.traj_file)

rule generate_amsm:
    input:
        dcd_file="02_intermediate/pdb/{protein_name}.with_traj.ca.dcd"
    output:
        amsm_path="02_intermediate/bio3d_geostas/{protein_name}_amsm.csv",
        benchmark_tsv="04_extra/benchmarks/amsm/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/amsm/{protein_name}.tsv"
    shell:
        """
        Rscript scripts/generate_amsm.R {input.dcd_file} {output.amsm_path}
        """

rule segment_by_geostas:
    input:
        dcd_file="02_intermediate/pdb/{protein_name}.with_traj.ca.dcd",
        amsm_path="02_intermediate/bio3d_geostas/{protein_name}_amsm.csv"
    output:
        clustering=directory("02_intermediate/bio3d_geostas/{protein_name}"),
        benchmark_tsv="04_extra/benchmarks/geostas/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/geostas/{protein_name}.tsv"
    shell:
        """
        Rscript scripts/segment_with_geostas.R {input.dcd_file} {input.amsm_path} {output.clustering}
        """

rule collect_segmentation_intermediates:
    input:
        static_pdb="02_intermediate/pdb/{protein_name}.static.pdb",
        chainsaw="02_intermediate/chainsaw/{protein_name}.tsv",
        merizo="02_intermediate/merizo/{protein_name}.tsv",
        bio3d_geostas="02_intermediate/bio3d_geostas/{protein_name}/",
    output:
        segmentation="03_output/{protein_name}.segmentation.tsv",
        benchmark_tsv="04_extra/benchmarks/segment_intermediates/{protein_name}.tsv"
    benchmark:
        "04_extra/benchmarks/segment_intermediates/{protein_name}.tsv"
    run:
        inputs = [
            chainsaw.Parser(input.chainsaw),
            merizo.Parser(input.merizo),
            geostas.Parser(input.static_pdb, input.bio3d_geostas),
        ]

        write_segmentations(inputs, output.segmentation)
